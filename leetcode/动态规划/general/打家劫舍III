'''
在上次打劫完一条街道之后和一圈房屋后，小偷又发现了一个新的可行窃的地区。这个地区只有一个入口，我们称之为“根”。 除了“根”之外，每栋房子有且只有一个“父“房子与之相连。一番侦察之后，聪明的小偷意识到“这个地方的所有房屋的排列类似于一棵二叉树”。 如果两个直接相连的房子在同一天晚上被打劫，房屋将自动报警。

计算在不触动警报的情况下，小偷一晚能够盗取的最高金额。

示例 1:

输入: [3,2,3,null,3,null,1]

     3
    / \
   2   3
    \   \
     3   1

输出: 7
解释: 小偷一晚能够盗取的最高金额 = 3 + 3 + 1 = 7.
示例 2:

输入: [3,4,5,1,3,null,1]

     3
    / \
   4   5
  / \   \
 1   3   1

输出: 9
解释: 小偷一晚能够盗取的最高金额 = 4 + 5 = 9.

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/house-robber-iii
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
'''

from leetcode.BinaryTree.NodeAndBuildTree import *

class Solution:
    #方法一
    memo = {}
    def rob(self, root: TreeNode) -> int:
        if not root:
            return 0
        if root in self.memo.keys():
            return self.memo[root]

        money = root.val
        if root.left:
            money += self.rob(root.left.left) + self.rob(root.left.right)
        if root.right:
            money += self.rob(root.right.left) + self.rob(root.right.right)
        maxSum = max(money,self.rob(root.left) + self.rob(root.right))
        self.memo[root] = maxSum
        return maxSum

    #方法二：增加代码可阅读性
    def rob_1(self,root: TreeNode) -> int:
        memo = {}
        def my_rob(root,memo):
            if not root:
                return 0
            if root in memo:    #判断键是否在字典中
                return memo[root]

            money = root.val
            if root.left:
                money += my_rob(root.left.left,memo) + my_rob(root.left.right,memo)
            if root.right:
                money += my_rob(root.right.left,memo) + my_rob(root.right.right,memo)
            num = max(money,my_rob(root.left,memo) + my_rob(root.right,memo))
            memo[root] = num    #向字典添加键值对的方法
            return num
        return my_rob(root,memo)

#测试
lst = [3,20,5,1,2,1,20]
root = list_buildTree(lst)
res = Solution().rob_1(root)
print(res)

